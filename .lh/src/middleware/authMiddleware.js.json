{
    "sourceFile": "src/middleware/authMiddleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760638850519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760638850519,
            "name": "Commit-0",
            "content": "// server/src/middleware/authMiddleware.js\nimport jwt from 'jsonwebtoken';\nimport User from '../models/User.js';\n\n/**\n * Auth guard: verifies JWT (from cookie or Authorization header)\n * and attaches full user info to req.user: { id, name, email, role }\n */\nexport async function protect(req, res, next) {\n  try {\n    // Accept token from cookie OR \"Authorization: Bearer <token>\"\n    let token =\n      req.cookies?.token ||\n      (req.headers.authorization?.startsWith('Bearer ')\n        ? req.headers.authorization.split(' ')[1]\n        : null);\n\n    if (!token) {\n      return res.status(401).json({ message: 'Not authorized' });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    // If your token only contains { id }, this will fetch the rest.\n    // If your token contains more, DB is still source of truth.\n    const user = await User.findById(decoded.id).select('name email role');\n\n    if (!user) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n\n    req.user = {\n      id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      role: user.role,\n    };\n\n    return next();\n  } catch (err) {\n    console.error('[auth] protect error:', err.message);\n    return res.status(403).json({ message: 'Invalid token' });\n  }\n}\n\n/**\n * Role guard: ensures the authenticated user has the required role\n */\nexport function requireRole(role) {\n  return (req, res, next) => {\n    if (req.user?.role !== role) {\n      return res.status(403).json({ message: 'Forbidden' });\n    }\n    next();\n  };\n}\n"
        }
    ]
}