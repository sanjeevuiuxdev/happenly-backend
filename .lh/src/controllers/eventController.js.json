{
    "sourceFile": "src/controllers/eventController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1760416746763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760416763271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,4 +39,49 @@\n export async function removeEvent(req, res) {\n   await Event.findByIdAndDelete(req.params.id);\n   res.json({ ok: true });\n }\n+\n+\n+// ...existing handlers (listEvents, getEvent)\n+\n+export async function createEvent(req, res) {\n+  const body = req.body;\n+\n+  // Convert stringified fields when multipart/form-data\n+  const payload = {\n+    title: body.title,\n+    description: body.description,\n+    department: body.department,\n+    type: body.type,\n+    tags: body.tags ? (Array.isArray(body.tags) ? body.tags : body.tags.split(',').map(s=>s.trim()).filter(Boolean)) : [],\n+    startAt: body.startAt ? new Date(body.startAt) : undefined,\n+    endAt: body.endAt ? new Date(body.endAt) : undefined,\n+    location: body.location ? (typeof body.location === 'string' ? { name: body.location } : body.location) : undefined,\n+    createdBy: req.user.id,\n+    media: []\n+  };\n+\n+  // Upload each file to Cloudinary\n+  if (req.files?.length) {\n+    const uploads = await Promise.all(\n+      req.files.map(f => new Promise((resolve, reject) => {\n+        const resource_type = f.mimetype.startsWith('video') ? 'video' : 'image';\n+        const stream = cloudinary.uploader.upload_stream(\n+          { folder: 'happennly/events', resource_type },\n+          (err, result) => err ? reject(err) : resolve({ url: result.secure_url, kind: resource_type })\n+        );\n+        stream.end(f.buffer);\n+      }))\n+    );\n+    payload.media = uploads;\n+  }\n+\n+  const doc = await Event.create(payload);\n+  res.status(201).json(doc);\n+}\n+\n+export async function updateEvent(req, res) {\n+  const doc = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\n+  if (!doc) return res.status(404).json({ message: 'Not found' });\n+  res.json(doc);\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760418538536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,21 @@\n+// server/src/controllers/eventController.js\n import Event from '../models/Event.js';\n import cloudinary from '../config/cloudinary.js';\n \n+/** GET /events */\n export async function listEvents(req, res) {\n   const { q, department, type, from, to, sort = 'startAt', order = 'asc', page = 1, limit = 10 } = req.query;\n   const where = {};\n   if (q) where.$text = { $search: q };\n   if (department) where.department = department;\n   if (type) where.type = type;\n-  if (from || to) where.startAt = { ...(from && { $gte: new Date(from) }), ...(to && { $lte: new Date(to) }) };\n+  if (from || to) {\n+    where.startAt = {\n+      ...(from && { $gte: new Date(from) }),\n+      ...(to && { $lte: new Date(to) }),\n+    };\n+  }\n \n   const skip = (Number(page) - 1) * Number(limit);\n   const [items, total] = await Promise.all([\n     Event.find(where).sort({ [sort]: order === 'desc' ? -1 : 1 }).skip(skip).limit(Number(limit)),\n@@ -17,71 +24,64 @@\n \n   res.json({ items, total, page: Number(page), pages: Math.ceil(total / Number(limit)) });\n }\n \n+/** GET /events/:id */\n export async function getEvent(req, res) {\n   const doc = await Event.findById(req.params.id);\n   if (!doc) return res.status(404).json({ message: 'Not found' });\n   res.json(doc);\n }\n \n+/** POST /events  (admin) — supports media upload via multer + cloudinary */\n export async function createEvent(req, res) {\n-  const payload = { ...req.body, createdBy: req.user.id };\n-  const doc = await Event.create(payload);\n-  res.status(201).json(doc);\n-}\n+  const b = req.body;\n \n-export async function updateEvent(req, res) {\n-  const doc = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\n-  if (!doc) return res.status(404).json({ message: 'Not found' });\n-  res.json(doc);\n-}\n-\n-export async function removeEvent(req, res) {\n-  await Event.findByIdAndDelete(req.params.id);\n-  res.json({ ok: true });\n-}\n-\n-\n-// ...existing handlers (listEvents, getEvent)\n-\n-export async function createEvent(req, res) {\n-  const body = req.body;\n-\n-  // Convert stringified fields when multipart/form-data\n   const payload = {\n-    title: body.title,\n-    description: body.description,\n-    department: body.department,\n-    type: body.type,\n-    tags: body.tags ? (Array.isArray(body.tags) ? body.tags : body.tags.split(',').map(s=>s.trim()).filter(Boolean)) : [],\n-    startAt: body.startAt ? new Date(body.startAt) : undefined,\n-    endAt: body.endAt ? new Date(body.endAt) : undefined,\n-    location: body.location ? (typeof body.location === 'string' ? { name: body.location } : body.location) : undefined,\n+    title: b.title,\n+    description: b.description,\n+    department: b.department,\n+    type: b.type,\n+    tags: b.tags\n+      ? (Array.isArray(b.tags) ? b.tags : b.tags.split(',').map(s => s.trim()).filter(Boolean))\n+      : [],\n+    startAt: b.startAt ? new Date(b.startAt) : undefined,\n+    endAt: b.endAt ? new Date(b.endAt) : undefined,\n+    location: b.location ? (typeof b.location === 'string' ? { name: b.location } : b.location) : undefined,\n     createdBy: req.user.id,\n-    media: []\n+    media: [],\n   };\n \n-  // Upload each file to Cloudinary\n+  // Upload any attached files\n   if (req.files?.length) {\n     const uploads = await Promise.all(\n-      req.files.map(f => new Promise((resolve, reject) => {\n-        const resource_type = f.mimetype.startsWith('video') ? 'video' : 'image';\n-        const stream = cloudinary.uploader.upload_stream(\n-          { folder: 'happennly/events', resource_type },\n-          (err, result) => err ? reject(err) : resolve({ url: result.secure_url, kind: resource_type })\n-        );\n\\ No newline at end of file\n-        stream.end(f.buffer);\n-      }))\n+      req.files.map(\n+        (f) =>\n+          new Promise((resolve, reject) => {\n+            const resource_type = f.mimetype.startsWith('video') ? 'video' : 'image';\n+            const stream = cloudinary.uploader.upload_stream(\n+              { folder: 'happennly/events', resource_type },\n+              (err, result) => (err ? reject(err) : resolve({ url: result.secure_url, kind: resource_type }))\n+            );\n+            stream.end(f.buffer);\n+          })\n+      )\n     );\n     payload.media = uploads;\n   }\n \n   const doc = await Event.create(payload);\n   res.status(201).json(doc);\n }\n \n+/** PATCH /events/:id (admin) */\n export async function updateEvent(req, res) {\n   const doc = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\n   if (!doc) return res.status(404).json({ message: 'Not found' });\n   res.json(doc);\n-}\n+}\n+\n+/** DELETE /events/:id (admin) */\n+export async function removeEvent(req, res) {\n+  await Event.findByIdAndDelete(req.params.id);\n+  res.json({ ok: true });\n+}\n"
                },
                {
                    "date": 1760506631514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,14 @@\n \n   const payload = {\n     title: b.title,\n     description: b.description,\n-    department: b.department,\n+    department: b.department, // must be one of DEPARTMENTS\n+  organizer: {\n+    name: b.organizerName || b?.organizer?.name,\n+    company: b.organizerCompany || b?.organizer?.company,\n+    email: b.organizerEmail || b?.organizer?.email,\n+  },\n     type: b.type,\n     tags: b.tags\n       ? (Array.isArray(b.tags) ? b.tags : b.tags.split(',').map(s => s.trim()).filter(Boolean))\n       : [],\n"
                },
                {
                    "date": 1760510818888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,14 +38,9 @@\n \n   const payload = {\n     title: b.title,\n     description: b.description,\n-    department: b.department, // must be one of DEPARTMENTS\n-  organizer: {\n-    name: b.organizerName || b?.organizer?.name,\n-    company: b.organizerCompany || b?.organizer?.company,\n-    email: b.organizerEmail || b?.organizer?.email,\n-  },\n+    department: b.department,\n     type: b.type,\n     tags: b.tags\n       ? (Array.isArray(b.tags) ? b.tags : b.tags.split(',').map(s => s.trim()).filter(Boolean))\n       : [],\n"
                },
                {
                    "date": 1760510839816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,14 @@\n \n   const payload = {\n     title: b.title,\n     description: b.description,\n-    department: b.department,\n+    department: b.department, // must be one of DEPARTMENTS\n+  organizer: {\n+    name: b.organizerName || b?.organizer?.name,\n+    company: b.organizerCompany || b?.organizer?.company,\n+    email: b.organizerEmail || b?.organizer?.email,\n+  },\n     type: b.type,\n     tags: b.tags\n       ? (Array.isArray(b.tags) ? b.tags : b.tags.split(',').map(s => s.trim()).filter(Boolean))\n       : [],\n@@ -84,4 +89,53 @@\n export async function removeEvent(req, res) {\n   await Event.findByIdAndDelete(req.params.id);\n   res.json({ ok: true });\n }\n+\n+\n+// ✅ Update event (with optional media re-upload)\n+export async function updateEvent(req, res) {\n+  try {\n+    const { id } = req.params;\n+    const body = req.body;\n+\n+    const event = await Event.findById(id);\n+    if (!event) return res.status(404).json({ message: 'Event not found' });\n+\n+    // handle new file uploads (if multipart form)\n+    if (req.files?.length) {\n+      const uploads = await Promise.all(\n+        req.files.map(f =>\n+          new Promise((resolve, reject) => {\n+            const stream = cloudinary.uploader.upload_stream(\n+              { resource_type: 'auto' },\n+              (err, result) => (err ? reject(err) : resolve(result))\n+            );\n+            stream.end(f.buffer);\n+          })\n+        )\n+      );\n+      body.media = uploads.map(u => ({\n+        url: u.secure_url,\n+        kind: u.resource_type === 'video' ? 'video' : 'image',\n+      }));\n+    }\n+\n+    const updated = await Event.findByIdAndUpdate(id, body, { new: true });\n+    res.json(updated);\n+  } catch (err) {\n+    console.error(err);\n+    res.status(500).json({ message: 'Server error' });\n+  }\n+}\n+\n+// ✅ Delete event\n+export async function deleteEvent(req, res) {\n+  try {\n+    const { id } = req.params;\n+    const e = await Event.findByIdAndDelete(id);\n+    if (!e) return res.status(404).json({ message: 'Event not found' });\n+    res.json({ message: 'Event deleted successfully' });\n+  } catch (err) {\n+    res.status(500).json({ message: 'Server error' });\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760510849480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // server/src/controllers/eventController.js\n import Event from '../models/Event.js';\n import cloudinary from '../config/cloudinary.js';\n+import { v2 as cloudinary } from 'cloudinary';\n \n /** GET /events */\n export async function listEvents(req, res) {\n   const { q, department, type, from, to, sort = 'startAt', order = 'asc', page = 1, limit = 10 } = req.query;\n"
                },
                {
                    "date": 1760510857438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // server/src/controllers/eventController.js\n import Event from '../models/Event.js';\n import cloudinary from '../config/cloudinary.js';\n-import { v2 as cloudinary } from 'cloudinary';\n+// import { v2 as cloudinary } from 'cloudinary';\n \n /** GET /events */\n export async function listEvents(req, res) {\n   const { q, department, type, from, to, sort = 'startAt', order = 'asc', page = 1, limit = 10 } = req.query;\n"
                },
                {
                    "date": 1760510959485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,15 +78,8 @@\n   const doc = await Event.create(payload);\n   res.status(201).json(doc);\n }\n \n-/** PATCH /events/:id (admin) */\n-export async function updateEvent(req, res) {\n-  const doc = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\n-  if (!doc) return res.status(404).json({ message: 'Not found' });\n-  res.json(doc);\n-}\n-\n /** DELETE /events/:id (admin) */\n export async function removeEvent(req, res) {\n   await Event.findByIdAndDelete(req.params.id);\n   res.json({ ok: true });\n"
                },
                {
                    "date": 1760510989586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,15 @@\n   const doc = await Event.create(payload);\n   res.status(201).json(doc);\n }\n \n+/** PATCH /events/:id (admin) */\n+export async function updateEvent(req, res) {\n+  const doc = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\n+  if (!doc) return res.status(404).json({ message: 'Not found' });\n+  res.json(doc);\n+}\n+\n /** DELETE /events/:id (admin) */\n export async function removeEvent(req, res) {\n   await Event.findByIdAndDelete(req.params.id);\n   res.json({ ok: true });\n"
                },
                {
                    "date": 1760511054052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // server/src/controllers/eventController.js\n import Event from '../models/Event.js';\n import cloudinary from '../config/cloudinary.js';\n-// import { v2 as cloudinary } from 'cloudinary';\n+import { v2 as cloudinary } from 'cloudinary';\n \n /** GET /events */\n export async function listEvents(req, res) {\n   const { q, department, type, from, to, sort = 'startAt', order = 'asc', page = 1, limit = 10 } = req.query;\n"
                },
                {
                    "date": 1760511480578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // server/src/controllers/eventController.js\n import Event from '../models/Event.js';\n import cloudinary from '../config/cloudinary.js';\n-import { v2 as cloudinary } from 'cloudinary';\n+// import { v2 as cloudinary } from 'cloudinary';\n \n /** GET /events */\n export async function listEvents(req, res) {\n   const { q, department, type, from, to, sort = 'startAt', order = 'asc', page = 1, limit = 10 } = req.query;\n@@ -78,48 +78,40 @@\n   const doc = await Event.create(payload);\n   res.status(201).json(doc);\n }\n \n-/** PATCH /events/:id (admin) */\n-export async function updateEvent(req, res) {\n-  const doc = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\n-  if (!doc) return res.status(404).json({ message: 'Not found' });\n-  res.json(doc);\n-}\n-\n /** DELETE /events/:id (admin) */\n export async function removeEvent(req, res) {\n   await Event.findByIdAndDelete(req.params.id);\n   res.json({ ok: true });\n }\n \n \n-// ✅ Update event (with optional media re-upload)\n+/** PATCH /events/:id (admin) */\n export async function updateEvent(req, res) {\n   try {\n     const { id } = req.params;\n     const body = req.body;\n \n     const event = await Event.findById(id);\n     if (!event) return res.status(404).json({ message: 'Event not found' });\n \n-    // handle new file uploads (if multipart form)\n+    // Optional media re-upload (because route now has upload.array)\n     if (req.files?.length) {\n       const uploads = await Promise.all(\n-        req.files.map(f =>\n-          new Promise((resolve, reject) => {\n-            const stream = cloudinary.uploader.upload_stream(\n-              { resource_type: 'auto' },\n-              (err, result) => (err ? reject(err) : resolve(result))\n-            );\n-            stream.end(f.buffer);\n-          })\n+        req.files.map(\n+          f =>\n+            new Promise((resolve, reject) => {\n+              const resource_type = f.mimetype.startsWith('video') ? 'video' : 'image';\n+              const stream = cloudinary.uploader.upload_stream(\n+                { folder: 'happennly/events', resource_type },\n+                (err, result) => (err ? reject(err) : resolve({ url: result.secure_url, kind: resource_type }))\n+              );\n+              stream.end(f.buffer);\n+            })\n         )\n       );\n-      body.media = uploads.map(u => ({\n-        url: u.secure_url,\n-        kind: u.resource_type === 'video' ? 'video' : 'image',\n-      }));\n+      body.media = uploads; // replace media; or merge with event.media if you prefer\n     }\n \n     const updated = await Event.findByIdAndUpdate(id, body, { new: true });\n     res.json(updated);\n@@ -128,15 +120,16 @@\n     res.status(500).json({ message: 'Server error' });\n   }\n }\n \n-// ✅ Delete event\n-export async function deleteEvent(req, res) {\n+/** DELETE /events/:id (admin) */\n+export async function removeEvent(req, res) {\n   try {\n     const { id } = req.params;\n-    const e = await Event.findByIdAndDelete(id);\n-    if (!e) return res.status(404).json({ message: 'Event not found' });\n-    res.json({ message: 'Event deleted successfully' });\n+    const doc = await Event.findByIdAndDelete(id);\n+    if (!doc) return res.status(404).json({ message: 'Event not found' });\n\\ No newline at end of file\n+    res.json({ ok: true, message: 'Event deleted' });\n   } catch (err) {\n+    console.error(err);\n     res.status(500).json({ message: 'Server error' });\n   }\n-}\n+}\n"
                },
                {
                    "date": 1760511939956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,12 +79,12 @@\n   res.status(201).json(doc);\n }\n \n /** DELETE /events/:id (admin) */\n-export async function removeEvent(req, res) {\n-  await Event.findByIdAndDelete(req.params.id);\n-  res.json({ ok: true });\n-}\n+// export async function removeEvent(req, res) {\n+//   await Event.findByIdAndDelete(req.params.id);\n+//   res.json({ ok: true });\n+// }\n \n \n /** PATCH /events/:id (admin) */\n export async function updateEvent(req, res) {\n@@ -131,5 +131,5 @@\n   } catch (err) {\n     console.error(err);\n     res.status(500).json({ message: 'Server error' });\n   }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1760553244009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,20 @@\n     payload.media = uploads;\n   }\n \n   const doc = await Event.create(payload);\n+\n+  const doc = await Event.create(payload);\n+\n+  // notify the creator (admin)\n+  try {\n+    await sendEventCreatedEmail({\n+      to: req.user.email,\n+      event: doc,\n+    });\n+  } catch (e) {\n+    console.warn('[mail] failed to send create email', e.message);\n+  }\n   res.status(201).json(doc);\n }\n \n /** DELETE /events/:id (admin) */\n"
                },
                {
                    "date": 1760596393860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // server/src/controllers/eventController.js\n import Event from '../models/Event.js';\n import cloudinary from '../config/cloudinary.js';\n+import { sendEventCreatedEmail } from '../utils/sendMail.js';\n // import { v2 as cloudinary } from 'cloudinary';\n \n /** GET /events */\n export async function listEvents(req, res) {\n@@ -76,10 +77,8 @@\n   }\n \n   const doc = await Event.create(payload);\n \n-  const doc = await Event.create(payload);\n-\n   // notify the creator (admin)\n   try {\n     await sendEventCreatedEmail({\n       to: req.user.email,\n"
                },
                {
                    "date": 1761126779749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,21 @@\n import { sendEventCreatedEmail } from '../utils/sendMail.js';\n // import { v2 as cloudinary } from 'cloudinary';\n \n /** GET /events */\n+// add this top-level helper in the file (outside the handler)\n+const esc = (s) => s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n+\n+/** GET /events */\n export async function listEvents(req, res) {\n   const { q, department, type, from, to, sort = 'startAt', order = 'asc', page = 1, limit = 10 } = req.query;\n   const where = {};\n   if (q) where.$text = { $search: q };\n-  if (department) where.department = department;\n-  if (type) where.type = type;\n+\n+  // ✅ case-insensitive exact match for department/type\n+  if (department) where.department = new RegExp(`^${esc(department)}$`, 'i');\n+  if (type) where.type = new RegExp(`^${esc(type)}$`, 'i');\n+\n   if (from || to) {\n     where.startAt = {\n       ...(from && { $gte: new Date(from) }),\n       ...(to && { $lte: new Date(to) }),\n@@ -26,8 +33,9 @@\n \n   res.json({ items, total, page: Number(page), pages: Math.ceil(total / Number(limit)) });\n }\n \n+\n /** GET /events/:id */\n export async function getEvent(req, res) {\n   const doc = await Event.findById(req.params.id);\n   if (!doc) return res.status(404).json({ message: 'Not found' });\n"
                },
                {
                    "date": 1761127973710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n   const where = {};\n   if (q) where.$text = { $search: q };\n \n   // ✅ case-insensitive exact match for department/type\n-  if (department) where.department = new RegExp(`^${esc(department)}$`, 'i');\n-  if (type) where.type = new RegExp(`^${esc(type)}$`, 'i');\n+  if (department) where.department = new RegExp(`^${department}$`, 'i');\n+  if (type) where.type = new RegExp(`^${type}$`, 'i');  \n \n   if (from || to) {\n     where.startAt = {\n       ...(from && { $gte: new Date(from) }),\n"
                },
                {
                    "date": 1761281575358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n               stream.end(f.buffer);\n             })\n         )\n       );\n-      body.media = uploads; // replace media; or merge with event.media if you prefer\n+      body.media = uploads; \n     }\n \n     const updated = await Event.findByIdAndUpdate(id, body, { new: true });\n     res.json(updated);\n"
                }
            ],
            "date": 1760416746763,
            "name": "Commit-0",
            "content": "import Event from '../models/Event.js';\nimport cloudinary from '../config/cloudinary.js';\n\nexport async function listEvents(req, res) {\n  const { q, department, type, from, to, sort = 'startAt', order = 'asc', page = 1, limit = 10 } = req.query;\n  const where = {};\n  if (q) where.$text = { $search: q };\n  if (department) where.department = department;\n  if (type) where.type = type;\n  if (from || to) where.startAt = { ...(from && { $gte: new Date(from) }), ...(to && { $lte: new Date(to) }) };\n\n  const skip = (Number(page) - 1) * Number(limit);\n  const [items, total] = await Promise.all([\n    Event.find(where).sort({ [sort]: order === 'desc' ? -1 : 1 }).skip(skip).limit(Number(limit)),\n    Event.countDocuments(where),\n  ]);\n\n  res.json({ items, total, page: Number(page), pages: Math.ceil(total / Number(limit)) });\n}\n\nexport async function getEvent(req, res) {\n  const doc = await Event.findById(req.params.id);\n  if (!doc) return res.status(404).json({ message: 'Not found' });\n  res.json(doc);\n}\n\nexport async function createEvent(req, res) {\n  const payload = { ...req.body, createdBy: req.user.id };\n  const doc = await Event.create(payload);\n  res.status(201).json(doc);\n}\n\nexport async function updateEvent(req, res) {\n  const doc = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\n  if (!doc) return res.status(404).json({ message: 'Not found' });\n  res.json(doc);\n}\n\nexport async function removeEvent(req, res) {\n  await Event.findByIdAndDelete(req.params.id);\n  res.json({ ok: true });\n}\n"
        }
    ]
}